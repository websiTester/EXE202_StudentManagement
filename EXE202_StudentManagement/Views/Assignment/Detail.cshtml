@model EXE202_StudentManagement.Models.Assignment

@{
    ViewData["Title"] = "Chi tiết Bài tập";
    var myGroup = ViewBag.MyGroup as EXE202_StudentManagement.Models.Group;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Viroom.com</title>

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(90deg, #c7d2fe, #a5b4fc, #818cf8);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .kanban-col {
            min-height: 200px;
        }

        .kanban-item {
            cursor: grab;
        }

        .modal {
            transition: all 0.3s ease-in-out;
        }

            .modal.hidden {
                opacity: 0;
                pointer-events: none;
            }
    </style>
</head>
<body class="flex flex-col min-h-screen">

    <!-- Header -->
    <header class="bg-white bg-opacity-80 shadow-sm sticky top-0 z-50 backdrop-blur-sm">
        <div class="container mx-auto px-4 py-4 flex justify-between items-center">
            <h1 class="text-2xl font-bold text-gray-800 flex items-center">
                <i class="fas fa-users-class text-indigo-500 mr-2"></i> Viroom
            </h1>
            <div class="flex items-center space-x-4">
                <span class="text-gray-700 font-medium">Xin chào, Nguyễn Văn A</span>
                <i class="fas fa-user-circle text-3xl text-gray-500"></i>
            </div>
        </div>
    </header>

    <!-- Main -->
    <main class="container mx-auto px-4 py-8 flex-grow">
        <div class="bg-white bg-opacity-90 rounded-xl shadow-lg p-6 md:p-10">
            <h2 class="text-3xl font-bold text-gray-800 mb-4">Bài tập: @Model.Title</h2>
            <p class="text-gray-600 mb-2">Giáo viên: @Model.Class?.Teacher?.FirstName @Model.Class?.Teacher?.LastName</p>
            <p class="text-gray-600 mb-6">
                <i class="fas fa-calendar-alt mr-2 text-indigo-500"></i>
                <span class="font-medium">Hạn chót:</span> @Model.Deadline?.ToString("dd/MM/yyyy")
            </p>
            <p class="text-gray-700 mb-8">@Model.Description</p>

          
                <!-- Kanban -->
                <section class="mb-12">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-2xl font-bold text-gray-800 flex items-center">
                            <i class="fas fa-tasks mr-2 text-indigo-500"></i> Tiến độ Nhóm
                        </h3>
                        <button onclick="showCreateTaskModal()"
                                class="bg-indigo-500 hover:bg-indigo-600 text-white text-sm font-bold py-2 px-4 rounded-lg">
                            <i class="fas fa-plus mr-1"></i> Tạo công việc
                        </button>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="bg-gray-100 rounded-lg p-4 shadow-inner kanban-col" ondrop="drop(event)" ondragover="allowDrop(event)">
                            <h4 class="font-semibold text-gray-800 mb-3">Cần làm</h4>
                            <div id="todo" class="space-y-3"></div>
                        </div>
                        <div class="bg-gray-100 rounded-lg p-4 shadow-inner kanban-col" ondrop="drop(event)" ondragover="allowDrop(event)">
                            <h4 class="font-semibold text-gray-800 mb-3">Đang làm</h4>
                            <div id="doing" class="space-y-3"></div>
                        </div>
                        <div class="bg-gray-100 rounded-lg p-4 shadow-inner kanban-col" ondrop="drop(event)" ondragover="allowDrop(event)">
                            <h4 class="font-semibold text-gray-800 mb-3">Hoàn thành</h4>
                            <div id="done" class="space-y-3"></div>
                        </div>
                    </div>
                    <div class="flex justify-center mt-10">
                        <div class="w-full md:w-1/2 lg:w-1/3">
                            <canvas id="progress-chart"></canvas>
                        </div>
                    </div>
                </section>
            
        </div>
    </main>

    <!-- Modal tạo task -->
    <div id="create-task-modal"
         class="modal fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center p-4 hidden">
        <div class="bg-white rounded-xl shadow-xl p-8 w-full max-w-md">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-2xl font-bold text-gray-800">Tạo công việc mới</h3>
                <button onclick="closeCreateTaskModal()" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            <form onsubmit="handleCreateTask(event)">
                <input type="hidden" id="assignment-id-hidden" value="@Model.Id" />
                <input type="hidden" id="group-id-hidden" value="@myGroup?.GroupId" />

                <label class="block text-gray-700 font-semibold mb-2">Tên công việc</label>
                <input type="text" id="task-name"
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg mb-4" required />

                <label class="block text-gray-700 font-semibold mb-2">Phân công cho</label>
                <select id="task-assignee"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg mb-4" required>
                    <option value="" disabled selected>-- Chọn thành viên --</option>
                    @if (myGroup?.StudentGroups != null)
                    {
                        foreach (var member in myGroup.StudentGroups)
                        {
                            <option value="@member.Student?.Id">
                                @member.Student?.FirstName @member.Student?.LastName
                            </option>
                        }
                    }
                </select>

                <button type="submit"
                        class="w-full bg-indigo-500 hover:bg-indigo-600 text-white font-bold py-3 rounded-lg">
                    Tạo
                </button>
            </form>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-white bg-opacity-80 text-gray-800 py-6 mt-auto">
        <div class="container mx-auto text-center">
            <p>&copy; 2024 Viroom.com. Tất cả quyền được bảo lưu.</p>
        </div>
    </footer>

    <!-- Script -->
    <script>
        const tasksData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
            Model.GroupTasks?.Where(t => t.GroupId == myGroup?.GroupId)
            .Select(t => new
            {
                taskId = t.TaskId,
                title = t.Title,
                status = (t.Status ?? "").Trim().ToLower(),
                assignedToName = (t.AssignedToNavigation != null
            ? (t.AssignedToNavigation.FirstName + " " + t.AssignedToNavigation.LastName).Trim()
            : "Chưa phân công")
            })
            ));

        let progressChart = null;

        function renderKanban() {
            const todo = document.getElementById("todo");
            const doing = document.getElementById("doing");
            const done = document.getElementById("done");
            todo.innerHTML = doing.innerHTML = done.innerHTML = "";

            tasksData.forEach(t => {
                const el = document.createElement("div");
                el.className = `kanban-item bg-white p-3 rounded-lg shadow-md border-l-4 ${borderColor(t.status)}`;
                el.draggable = true;
                el.ondragstart = drag;
                el.id = `task-${t.taskId}`;
                el.innerHTML = `<p class="font-medium">${t.title}</p>
                                        <p class="text-sm text-gray-500">Người phụ trách: ${t.assignedToName}</p>`;

                if (t.status === "todo") todo.appendChild(el);
                else if (t.status === "doing") doing.appendChild(el);
                else if (t.status === "done") done.appendChild(el);
            });
        }

        function borderColor(status) {
            if (status === "todo") return "border-red-500";
            if (status === "doing") return "border-blue-500";
            if (status === "done") return "border-green-500";
            return "border-gray-500";
        }

        function renderChart() {
            const todoCount = tasksData.filter(t => t.status === "todo").length;
            const doingCount = tasksData.filter(t => t.status === "doing").length;
            const doneCount = tasksData.filter(t => t.status === "done").length;

            const ctx = document.getElementById("progress-chart").getContext("2d");
            if (progressChart) {
                progressChart.data.datasets[0].data = [todoCount, doingCount, doneCount];
                progressChart.update();
            } else {
                progressChart = new Chart(ctx, {
                    type: "doughnut",
                    data: {
                        labels: ["Cần làm", "Đang làm", "Hoàn thành"],
                        datasets: [{
                            data: [todoCount, doingCount, doneCount],
                            backgroundColor: ["#ef4444", "#3b82f6", "#22c55e"]
                        }]
                    },
                    options: { plugins: { legend: { position: "bottom" } } }
                });
            }
        }

        // Drag Drop
        function allowDrop(ev) { ev.preventDefault(); }
        function drag(ev) { ev.dataTransfer.setData("text", ev.target.id); }
        function drop(ev) {
            ev.preventDefault();
            const data = ev.dataTransfer.getData("text");
            const el = document.getElementById(data);
            const container = ev.target.closest(".kanban-col").querySelector("div[id]");
            container.appendChild(el);

            let newStatus = container.id;
            const id = parseInt(data.split("-")[1]);
            const task = tasksData.find(x => x.taskId === id);
            if (task) task.status = newStatus;

            renderChart();

            fetch("/api/GroupTask/UpdateStatus", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ taskId: id, newStatus: newStatus })
            });
        }

        // Modal
        function showCreateTaskModal() { document.getElementById("create-task-modal").classList.remove("hidden"); }
        function closeCreateTaskModal() { document.getElementById("create-task-modal").classList.add("hidden"); }

        function handleCreateTask(ev) {
            ev.preventDefault();
            const name = document.getElementById("task-name").value;
            const assignee = document.getElementById("task-assignee").value;
            const assignmentId = parseInt(document.getElementById("assignment-id-hidden").value);
            const groupId = parseInt(document.getElementById("group-id-hidden").value);

            fetch("/api/Assignment/CreateTask", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    title: name,
                    assignedTo: assignee,
                    assignmentId,
                    groupId,
                    status: "todo"
                })
            })
                .then(r => r.json())
                .then(d => { if (d.success) location.reload(); });
        }

        document.addEventListener("DOMContentLoaded", () => {

            console.log(tasksData)

        });
    </script>
</body>
</html>
